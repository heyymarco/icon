// Provides a common icon set for html page using "font based icon" (Google's Material Icons -or- Font Awesome).



// development:
// @use "node_modules/@heymarco/sass-class-template/index" as *;
// @use "node_modules/@heymarco/sass-selector/index" as selector;

// production:
@use "../../../node_modules/@heymarco/sass-class-template/index" as *;
@use "../../../node_modules/@heymarco/sass-selector/index" as selector;



@use    "base"         as base;
@use    "font-material-codepoints"  as material;


@use    "common"       as *;
@use    "sass:string"  as string;
@use    "sass:map"     as map;



$alias              : "%icon-font"                          !default;
/*sub*/$class       : ".font"                               !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : "font"                                !default;
$var-prefix-base    : base.$var-prefix                      !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);

// development:
// $path           : "./fonts/"                                !default;

// production:
$path           : "./node_modules/@heymarco/icon/fonts/"    !default;

$files          : (
    "MaterialIcons-Regular.woff2",
    "MaterialIcons-Regular.woff",
    "MaterialIcons-Regular.ttf",
)                                                           !default;
$family         : "Material Icons"                          !default;
$style          : normal                                    !default;
$weight         : 400                                       !default;

$items          : material.$contents                        !default;

$items-n: ();
@each $item, $content in $items {
    $item-n: normalize-class($item);
    $items-n: map.merge($items-n, ($item-n: $content));
}



@function format($file) {
    // TODO: should better string.last-index
    $dot: string.index($file, ".");
    @if ($dot == null) { @return ""; }

    $ext: string.slice($file, $dot + 1);
    $ext: string.to-lower-case($ext);
    @if ($ext == "ttf") { @return "truetype"; }
    @return $ext;
}

@function src() {
    $list: "";
    @each $file in $files {
        $list: $list + "url(\"#{$path}#{$file}\") format(\"#{format($file)}\"), ";
    }

    // replace the last " ,"
    $list: string.slice($list, 1, -3);

    @return string.unquote($list);
}



@font-face {
    /* icon-font */

    font-family     : $family;
    font-style      : $style;
    font-weight     : $weight;
    src             : src();
}

@include declare-cssvar($var-root) {
    #{$cssvar}content   : "";
}



/* begin: item-specific (-specific) style */
@mixin _style-of($item) {
    $item-n: normalize-class($item);
    @if (not map.has-key($items-n, $item-n)) { @error "#{$item} is not found."; }
    
    $content: map.get($items-n, $item-n);
    #{$cssvar}content   : $content;
}
@mixin style-of($item) {
    @include _style-of($item);

    //items => implicitly included from style basic: @include style-basic;
}
@each $item-n, $content in $items-n {
    @include alias-of($alias, $item-n) {
        @include _style-of($item-n);

        //items => implicitly included from style basic: @extend #{$alias}--;
    }
}
/* end: item-specific (-specific) style */

/* begin: item-any (-) style */
@mixin _style-any($include) {
    @each $item-n, $content in $items-n {
        @include selector.append("." + $item-n) {
            @if ($include) {
                @include style-of($item-n);   // import item-specific style
            }
            @else {
                @extend #{$alias}-#{$item-n} !optional; // import item-specific style
            }
        }
    }
}
@mixin style-any {
    @include _style-any(true);
}
@include alias-any($alias) {
    @include _style-any(false);
}
/* end: item-any (-) style */



/* begin: basic (--) style */
@mixin _style-basic {
    font-size       : var(#{base.$cssvar}size);

    color           : var(#{base.$cssvar}color);


    font-family     : $family;
    font-style      : $style;
    font-weight     : $weight;

    line-height     : 1;
    text-transform  : none;
    letter-spacing  : normal;
    word-wrap       : normal;
    white-space     : nowrap;
    direction       : ltr;

    // support for all WebKit browsers
    -webkit-font-smoothing: antialiased;

    // support for Safari and Chrome
    text-rendering: optimizeLegibility;

    // support for Firefox
    -moz-osx-font-smoothing: grayscale;

    // support for IE
    font-feature-settings: 'liga';
}
@mixin style-basic {
    //sub-class => implicitly included from base: @include base.style;

    @include _style-basic;
}
@include alias-basic($alias) {
    //sub-class => implicitly included from base: @extend #{base.$alias} !optional;

    @include _style-basic;
}
/* end: basic (--) style */



/* begin: general style */
@mixin style {
    @include style-basic;   // import basic (--) style
    @include style-any;     // import item-any (-) style
}
@include alias($alias) {
    @extend #{$alias}-- !optional; // import basic (--) style
    @extend #{$alias}-  !optional; // import item-any (-) style
}
/* end: general style */



// abstract class => no emit class
// @include class($alias, $class, base.$class);