// Provides a common icon set for html page using "font based icon" (Google's Material Icons -or- Font Awesome).



@use "dependencies" as *;
@use "sass:string" as string;
@use "sass:map" as map;

@use "base" as base;
@use "font-material-codepoints" as material;



$alias          : "%icon-font"                              !default;
/*sub*/$class   : ".font"                                   !default;
$var-root       : base.$var-root                            !default;
$var-prefix     : "font"                                    !default;
$var-prefix: part-combine(base.$var-prefix, $var-prefix);
$cssvar: cssvar($var-prefix);

// development:
// $path           : "./fonts/"                                !default;

// production:
$path           : "./node_modules/@heymarco/icon/fonts/"    !default;

$files          : (
    "MaterialIcons-Regular.woff2",
    "MaterialIcons-Regular.woff",
    "MaterialIcons-Regular.ttf",
)                                                           !default;
$family         : "Material Icons"                          !default;
$style          : normal                                    !default;
$weight         : 400                                       !default;

$items          : material.$contents                        !default;

$items-n: ();
@each $item, $content in $items {
    $item-n: normalize-class($item);
    $items-n: map.merge($items-n, ($item-n: $content));
}



@function format($file) {
    // TODO: should better string.last-index
    $dot: string.index($file, ".");
    @if ($dot == null) { @return ""; }

    $ext: string.slice($file, $dot + 1);
    $ext: string.to-lower-case($ext);
    @if ($ext == "ttf") { @return "truetype"; }
    @return $ext;
}

@function src() {
    $list: "";
    @each $file in $files {
        $list: $list + "url(\"#{$path}#{$file}\") format(\"#{format($file)}\"), "
    }

    // replace the last " ,"
    $list: string.slice($list, 1, -3);

    @return string.unquote($list);
}



@font-face {
    /* icon-font */

    font-family     : $family;
    font-style      : $style;
    font-weight     : $weight;
    src             : src();
}

@if (str-not-empty($var-root)) { @include selector($var-root) {
    /* #{$alias} var */

    #{$cssvar}content   : "";
}}



/* begin: item-specific (-specific) style */
@mixin style-of($item) {
    $item-n: normalize-class($item);
    @if (not map.has-key($items-n, $item-n)) { @error "#{$item} is not found."; }
    
    $content: map.get($items-n, $item-n);
    #{$cssvar}content   : $content;
}
@each $item-n, $content in $items-n {
    #{$alias}-#{$item-n}  { @include style-of($item-n); }
}
/* end: item-specific (-specific) style */


/* begin: item-any (-) style */
@mixin style-any {
    @each $item-n, $content in $items-n { @include selector("&.#{$item-n}") {
        @include style-of($item-n);   // import item-specific style
    }}
}
#{$alias}- {
    @each $item-n, $content in $items-n { @include selector("&.#{$item-n}") {
        @extend #{$alias}-#{$item-n}; // import item-specific style
    }}
}
/* end: item-any (-) style */



/* begin: basic (--) style */
@mixin style-basic {
    /* icon-font */

    font-size       : var(#{base.$cssvar}size);

    color           : var(#{base.$cssvar}color);


    font-family     : $family;
    font-style      : $style;
    font-weight     : $weight;

    line-height     : 1;
    text-transform  : none;
    letter-spacing  : normal;
    word-wrap       : normal;
    white-space     : nowrap;
    direction       : ltr;

    // support for all WebKit browsers
    -webkit-font-smoothing: antialiased;

    // support for Safari and Chrome
    text-rendering: optimizeLegibility;

    // support for Firefox
    -moz-osx-font-smoothing: grayscale;

    // support for IE
    font-feature-settings: 'liga';
}
#{$alias}-- { @include style-basic; }
/* end: basic (--) style */

@mixin style {
    @include style-basic;   // import basic (--) style

    @include style-any;     // import item-any (-) style
}
@include declare-alias-base-class($alias, base.$class, $class) {
    @extend #{$alias}--;    // import basic (--) style

    @extend #{$alias}-;     // import item-any (-) style
}