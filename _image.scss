// Provides a common icon set for html page using "image based icon".



// development:
// @use "node_modules/@heymarco/sass-class-template/index" as *;
// @use "node_modules/@heymarco/sass-selector/index"       as selector;

// production:
@use "../../../node_modules/@heymarco/sass-class-template/index" as *;
@use "../../../node_modules/@heymarco/sass-selector/index"       as selector;



@use    "base"         as base;


@use    "common"       as *;
@use    "sass:string"  as string;
@use    "sass:map"     as map;



$alias              : "%icon-image"                         !default;
/*sub*/$class       : ".img"                                !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : "img"                                 !default;
$var-prefix-base    : base.$var-prefix                      !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);

// development:
// $path           : "./icons/"                                !default;

// production:
$path           : "./node_modules/@heymarco/icon/icons/"    !default;

$items          : (
 /* filename    | ratio */
    document    : 1.00,
    form        : 1.00,
    instagram   : 1.00,
    whatsapp    : 1.00,
)                                                           !default;
$ext            : svg                                       !default;
$ratio-default  : 1                                         !default;

$items-n: ();
@each $item, $ratio in $items {
    $item-n: normalize-class($item);
    $items-n: map.merge($items-n, ($item-n: $ratio));
}



@include declare-cssvar($var-root) {
    #{string.slice($cssvar, 1, -2)} : linear-gradient(transparent, transparent); // literally no image
    // #{$cssvar}path                  : $path;
    #{$cssvar}ratio                 : $ratio-default;
}



/* begin: item-specific (-specific) style */
@mixin _style-of($item, $include) {
    //items => implicitly included from style basic:
    // @if ($include) { @include style-basic; }
    // @else          { @extend #{$alias}--; }


    $item-n: normalize-class($item);
    @if (not map.has-key($items-n, $item-n)) { @error "#{$item} is not found."; }
    
    #{string.slice($cssvar, 1, -2)} : url("#{$path}#{$item}.#{$ext}");
    
    $ratio: map.get($items-n, $item-n);
    @if (($ratio < $ratio-default) or ($ratio > $ratio-default)) { #{$cssvar}ratio: $ratio; }
}
@mixin style-of($item) {
    @include _style-of($item, true);
}
@each $item-n, $ratio in $items-n {
    @include alias-of($alias, $item-n) {
        @include _style-of($item-n, false);
    }
}
/* end: item-specific (-specific) style */

/* begin: item-any (-) style */
@mixin _style-any($include) {
    @each $item-n, $ratio in $items-n {
        @include selector.append("." + $item-n) {
            // import item-specific style:
            @if ($include) { @include   style-of($item-n); }
            @else          { @extend #{$alias}-#{$item-n} !optional; }
        }
    }
}
@mixin style-any {
    @include _style-any(true);
}
@include alias-any($alias) {
    @include _style-any(false);
}
/* end: item-any (-) style */



/* begin: basic (--) style */
@mixin _style-basic($include) {
    //sub-class => implicitly included from base:
    // @if ($include) { @include  base.style; }
    // @else          { @extend #{base.$alias} !optional; }


    height                  :      var(#{base.$cssvar}size);
    width                   : calc(var(#{base.$cssvar}size) * var(#{$cssvar}ratio));
    
    background-color        : var(#{base.$cssvar}color);
    
    
    mask-image              : var(#{string.slice($cssvar, 1, -2)});
    mask-size               : contain;
    mask-repeat             : no-repeat;
    mask-position           : center;
    
    -webkit-mask-image      : var(#{string.slice($cssvar, 1, -2)});
    -webkit-mask-size       : contain;
    -webkit-mask-repeat     : no-repeat;
    -webkit-mask-position   : center;
}
@mixin style-basic {
    @include _style-basic(true);
}
@include alias-basic($alias) {
    @include _style-basic(false);
}
/* end: basic (--) style */



/* begin: general style */
@mixin style {
    @include style-basic;   // import basic (--) style
    @include style-any;     // import item-any (-) style
}
@include alias($alias) {
    @extend #{$alias}-- !optional; // import basic (--) style
    @extend #{$alias}-  !optional; // import item-any (-) style
}
/* end: general style */



// abstract class => no emit class
// @include class($alias, $class, base.$class);